export const Reducer = {
	universe: [1,2,3,4,5,6,7,8,9],
	pv: {3:{2:[[1,2]],3:[],4:[],5:[],6:[],7:[],8:[],9:[]},4:{2:[[1,3]],3:[],4:[],5:[],6:[],7:[],8:[],9:[]},5:{2:[[1,4],[2,3]],3:[],4:[],5:[],6:[],7:[],8:[],9:[]},6:{2:[[1,5],[2,4]],3:[[1,2,3]],4:[],5:[],6:[],7:[],8:[],9:[]},7:{2:[[1,6],[2,5],[3,4]],3:[[1,2,4]],4:[],5:[],6:[],7:[],8:[],9:[]},8:{2:[[1,7],[2,6],[3,5]],3:[[1,2,5],[1,3,4]],4:[],5:[],6:[],7:[],8:[],9:[]},9:{2:[[1,8],[2,7],[3,6],[4,5]],3:[[1,2,6],[1,3,5],[2,3,4]],4:[],5:[],6:[],7:[],8:[],9:[]},10:{2:[[1,9],[2,8],[3,7],[4,6]],3:[[1,2,7],[1,3,6],[1,4,5],[2,3,5]],4:[[1,2,3,4]],5:[],6:[],7:[],8:[],9:[]},11:{2:[[2,9],[3,8],[4,7],[5,6]],3:[[1,2,8],[1,3,7],[1,4,6],[2,3,6],[2,4,5]],4:[[1,2,3,5]],5:[],6:[],7:[],8:[],9:[]},12:{2:[[3,9],[4,8],[5,7]],3:[[1,2,9],[1,3,8],[1,4,7],[1,5,6],[2,3,7],[2,4,6],[3,4,5]],4:[[1,2,3,6],[1,2,4,5]],5:[],6:[],7:[],8:[],9:[]},13:{2:[[4,9],[5,8],[6,7]],3:[[1,3,9],[1,4,8],[1,5,7],[2,3,8],[2,4,7],[2,5,6],[3,4,6]],4:[[1,2,3,7],[1,2,4,6],[1,3,4,5]],5:[],6:[],7:[],8:[],9:[]},14:{2:[[5,9],[6,8]],3:[[1,4,9],[1,5,8],[1,6,7],[2,3,9],[2,4,8],[2,5,7],[3,4,7],[3,5,6]],4:[[1,2,3,8],[1,2,4,7],[1,2,5,6],[1,3,4,6],[2,3,4,5]],5:[],6:[],7:[],8:[],9:[]},15:{2:[[6,9],[7,8]],3:[[1,5,9],[1,6,8],[2,4,9],[2,5,8],[2,6,7],[3,4,8],[3,5,7],[4,5,6]],4:[[1,2,3,9],[1,2,4,8],[1,2,5,7],[1,3,4,7],[1,3,5,6],[2,3,4,6]],5:[[1,2,3,4,5]],6:[],7:[],8:[],9:[]},16:{2:[[7,9]],3:[[1,6,9],[1,7,8],[2,5,9],[2,6,8],[3,4,9],[3,5,8],[3,6,7],[4,5,7]],4:[[1,2,4,9],[1,2,5,8],[1,2,6,7],[1,3,4,8],[1,3,5,7],[1,4,5,6],[2,3,4,7],[2,3,5,6]],5:[[1,2,3,4,6]],6:[],7:[],8:[],9:[]},17:{2:[[8,9]],3:[[1,7,9],[2,6,9],[2,7,8],[3,5,9],[3,6,8],[4,5,8],[4,6,7]],4:[[1,2,5,9],[1,2,6,8],[1,3,4,9],[1,3,5,8],[1,3,6,7],[1,4,5,7],[2,3,4,8],[2,3,5,7],[2,4,5,6]],5:[[1,2,3,4,7],[1,2,3,5,6]],6:[],7:[],8:[],9:[]},18:{2:[],3:[[1,8,9],[2,7,9],[3,6,9],[3,7,8],[4,5,9],[4,6,8],[5,6,7]],4:[[1,2,6,9],[1,2,7,8],[1,3,5,9],[1,3,6,8],[1,4,5,8],[1,4,6,7],[2,3,4,9],[2,3,5,8],[2,3,6,7],[2,4,5,7],[3,4,5,6]],5:[[1,2,3,4,8],[1,2,3,5,7],[1,2,4,5,6]],6:[],7:[],8:[],9:[]},19:{2:[],3:[[2,8,9],[3,7,9],[4,6,9],[4,7,8],[5,6,8]],4:[[1,2,7,9],[1,3,6,9],[1,3,7,8],[1,4,5,9],[1,4,6,8],[1,5,6,7],[2,3,5,9],[2,3,6,8],[2,4,5,8],[2,4,6,7],[3,4,5,7]],5:[[1,2,3,4,9],[1,2,3,5,8],[1,2,3,6,7],[1,2,4,5,7],[1,3,4,5,6]],6:[],7:[],8:[],9:[]},20:{2:[],3:[[3,8,9],[4,7,9],[5,6,9],[5,7,8]],4:[[1,2,8,9],[1,3,7,9],[1,4,6,9],[1,4,7,8],[1,5,6,8],[2,3,6,9],[2,3,7,8],[2,4,5,9],[2,4,6,8],[2,5,6,7],[3,4,5,8],[3,4,6,7]],5:[[1,2,3,5,9],[1,2,3,6,8],[1,2,4,5,8],[1,2,4,6,7],[1,3,4,5,7],[2,3,4,5,6]],6:[],7:[],8:[],9:[]},21:{2:[],3:[[4,8,9],[5,7,9],[6,7,8]],4:[[1,3,8,9],[1,4,7,9],[1,5,6,9],[1,5,7,8],[2,3,7,9],[2,4,6,9],[2,4,7,8],[2,5,6,8],[3,4,5,9],[3,4,6,8],[3,5,6,7]],5:[[1,2,3,6,9],[1,2,3,7,8],[1,2,4,5,9],[1,2,4,6,8],[1,2,5,6,7],[1,3,4,5,8],[1,3,4,6,7],[2,3,4,5,7]],6:[[1,2,3,4,5,6]],7:[],8:[],9:[]},22:{2:[],3:[[5,8,9],[6,7,9]],4:[[1,4,8,9],[1,5,7,9],[1,6,7,8],[2,3,8,9],[2,4,7,9],[2,5,6,9],[2,5,7,8],[3,4,6,9],[3,4,7,8],[3,5,6,8],[4,5,6,7]],5:[[1,2,3,7,9],[1,2,4,6,9],[1,2,4,7,8],[1,2,5,6,8],[1,3,4,5,9],[1,3,4,6,8],[1,3,5,6,7],[2,3,4,5,8],[2,3,4,6,7]],6:[[1,2,3,4,5,7]],7:[],8:[],9:[]},23:{2:[],3:[[6,8,9]],4:[[1,5,8,9],[1,6,7,9],[2,4,8,9],[2,5,7,9],[2,6,7,8],[3,4,7,9],[3,5,6,9],[3,5,7,8],[4,5,6,8]],5:[[1,2,3,8,9],[1,2,4,7,9],[1,2,5,6,9],[1,2,5,7,8],[1,3,4,6,9],[1,3,4,7,8],[1,3,5,6,8],[1,4,5,6,7],[2,3,4,5,9],[2,3,4,6,8],[2,3,5,6,7]],6:[[1,2,3,4,5,8],[1,2,3,4,6,7]],7:[],8:[],9:[]},24:{2:[],3:[[7,8,9]],4:[[1,6,8,9],[2,5,8,9],[2,6,7,9],[3,4,8,9],[3,5,7,9],[3,6,7,8],[4,5,6,9],[4,5,7,8]],5:[[1,2,4,8,9],[1,2,5,7,9],[1,2,6,7,8],[1,3,4,7,9],[1,3,5,6,9],[1,3,5,7,8],[1,4,5,6,8],[2,3,4,6,9],[2,3,4,7,8],[2,3,5,6,8],[2,4,5,6,7]],6:[[1,2,3,4,5,9],[1,2,3,4,6,8],[1,2,3,5,6,7]],7:[],8:[],9:[]},25:{2:[],3:[],4:[[1,7,8,9],[2,6,8,9],[3,5,8,9],[3,6,7,9],[4,5,7,9],[4,6,7,8]],5:[[1,2,5,8,9],[1,2,6,7,9],[1,3,4,8,9],[1,3,5,7,9],[1,3,6,7,8],[1,4,5,6,9],[1,4,5,7,8],[2,3,4,7,9],[2,3,5,6,9],[2,3,5,7,8],[2,4,5,6,8],[3,4,5,6,7]],6:[[1,2,3,4,6,9],[1,2,3,4,7,8],[1,2,3,5,6,8],[1,2,4,5,6,7]],7:[],8:[],9:[]},26:{2:[],3:[],4:[[2,7,8,9],[3,6,8,9],[4,5,8,9],[4,6,7,9],[5,6,7,8]],5:[[1,2,6,8,9],[1,3,5,8,9],[1,3,6,7,9],[1,4,5,7,9],[1,4,6,7,8],[2,3,4,8,9],[2,3,5,7,9],[2,3,6,7,8],[2,4,5,6,9],[2,4,5,7,8],[3,4,5,6,8]],6:[[1,2,3,4,7,9],[1,2,3,5,6,9],[1,2,3,5,7,8],[1,2,4,5,6,8],[1,3,4,5,6,7]],7:[],8:[],9:[]},27:{2:[],3:[],4:[[3,7,8,9],[4,6,8,9],[5,6,7,9]],5:[[1,2,7,8,9],[1,3,6,8,9],[1,4,5,8,9],[1,4,6,7,9],[1,5,6,7,8],[2,3,5,8,9],[2,3,6,7,9],[2,4,5,7,9],[2,4,6,7,8],[3,4,5,6,9],[3,4,5,7,8]],6:[[1,2,3,4,8,9],[1,2,3,5,7,9],[1,2,3,6,7,8],[1,2,4,5,6,9],[1,2,4,5,7,8],[1,3,4,5,6,8],[2,3,4,5,6,7]],7:[],8:[],9:[]},28:{2:[],3:[],4:[[4,7,8,9],[5,6,8,9]],5:[[1,3,7,8,9],[1,4,6,8,9],[1,5,6,7,9],[2,3,6,8,9],[2,4,5,8,9],[2,4,6,7,9],[2,5,6,7,8],[3,4,5,7,9],[3,4,6,7,8]],6:[[1,2,3,5,8,9],[1,2,3,6,7,9],[1,2,4,5,7,9],[1,2,4,6,7,8],[1,3,4,5,6,9],[1,3,4,5,7,8],[2,3,4,5,6,8]],7:[[1,2,3,4,5,6,7]],8:[],9:[]},29:{2:[],3:[],4:[[5,7,8,9]],5:[[1,4,7,8,9],[1,5,6,8,9],[2,3,7,8,9],[2,4,6,8,9],[2,5,6,7,9],[3,4,5,8,9],[3,4,6,7,9],[3,5,6,7,8]],6:[[1,2,3,6,8,9],[1,2,4,5,8,9],[1,2,4,6,7,9],[1,2,5,6,7,8],[1,3,4,5,7,9],[1,3,4,6,7,8],[2,3,4,5,6,9],[2,3,4,5,7,8]],7:[[1,2,3,4,5,6,8]],8:[],9:[]},30:{2:[],3:[],4:[[6,7,8,9]],5:[[1,5,7,8,9],[2,4,7,8,9],[2,5,6,8,9],[3,4,6,8,9],[3,5,6,7,9],[4,5,6,7,8]],6:[[1,2,3,7,8,9],[1,2,4,6,8,9],[1,2,5,6,7,9],[1,3,4,5,8,9],[1,3,4,6,7,9],[1,3,5,6,7,8],[2,3,4,5,7,9],[2,3,4,6,7,8]],7:[[1,2,3,4,5,6,9],[1,2,3,4,5,7,8]],8:[],9:[]},31:{2:[],3:[],4:[],5:[[1,6,7,8,9],[2,5,7,8,9],[3,4,7,8,9],[3,5,6,8,9],[4,5,6,7,9]],6:[[1,2,4,7,8,9],[1,2,5,6,8,9],[1,3,4,6,8,9],[1,3,5,6,7,9],[1,4,5,6,7,8],[2,3,4,5,8,9],[2,3,4,6,7,9],[2,3,5,6,7,8]],7:[[1,2,3,4,5,7,9],[1,2,3,4,6,7,8]],8:[],9:[]},32:{2:[],3:[],4:[],5:[[2,6,7,8,9],[3,5,7,8,9],[4,5,6,8,9]],6:[[1,2,5,7,8,9],[1,3,4,7,8,9],[1,3,5,6,8,9],[1,4,5,6,7,9],[2,3,4,6,8,9],[2,3,5,6,7,9],[2,4,5,6,7,8]],7:[[1,2,3,4,5,8,9],[1,2,3,4,6,7,9],[1,2,3,5,6,7,8]],8:[],9:[]},33:{2:[],3:[],4:[],5:[[3,6,7,8,9],[4,5,7,8,9]],6:[[1,2,6,7,8,9],[1,3,5,7,8,9],[1,4,5,6,8,9],[2,3,4,7,8,9],[2,3,5,6,8,9],[2,4,5,6,7,9],[3,4,5,6,7,8]],7:[[1,2,3,4,6,8,9],[1,2,3,5,6,7,9],[1,2,4,5,6,7,8]],8:[],9:[]},34:{2:[],3:[],4:[],5:[[4,6,7,8,9]],6:[[1,3,6,7,8,9],[1,4,5,7,8,9],[2,3,5,7,8,9],[2,4,5,6,8,9],[3,4,5,6,7,9]],7:[[1,2,3,4,7,8,9],[1,2,3,5,6,8,9],[1,2,4,5,6,7,9],[1,3,4,5,6,7,8]],8:[],9:[]},35:{2:[],3:[],4:[],5:[[5,6,7,8,9]],6:[[1,4,6,7,8,9],[2,3,6,7,8,9],[2,4,5,7,8,9],[3,4,5,6,8,9]],7:[[1,2,3,5,7,8,9],[1,2,4,5,6,8,9],[1,3,4,5,6,7,9],[2,3,4,5,6,7,8]],8:[],9:[]},36:{2:[],3:[],4:[],5:[],6:[[1,5,6,7,8,9],[2,4,6,7,8,9],[3,4,5,7,8,9]],7:[[1,2,3,6,7,8,9],[1,2,4,5,7,8,9],[1,3,4,5,6,8,9],[2,3,4,5,6,7,9]],8:[[1,2,3,4,5,6,7,8]],9:[]},37:{2:[],3:[],4:[],5:[],6:[[2,5,6,7,8,9],[3,4,6,7,8,9]],7:[[1,2,4,6,7,8,9],[1,3,4,5,7,8,9],[2,3,4,5,6,8,9]],8:[[1,2,3,4,5,6,7,9]],9:[]},38:{2:[],3:[],4:[],5:[],6:[[3,5,6,7,8,9]],7:[[1,2,5,6,7,8,9],[1,3,4,6,7,8,9],[2,3,4,5,7,8,9]],8:[[1,2,3,4,5,6,8,9]],9:[]},39:{2:[],3:[],4:[],5:[],6:[[4,5,6,7,8,9]],7:[[1,3,5,6,7,8,9],[2,3,4,6,7,8,9]],8:[[1,2,3,4,5,7,8,9]],9:[]},40:{2:[],3:[],4:[],5:[],6:[],7:[[1,4,5,6,7,8,9],[2,3,5,6,7,8,9]],8:[[1,2,3,4,6,7,8,9]],9:[]},41:{2:[],3:[],4:[],5:[],6:[],7:[[2,4,5,6,7,8,9]],8:[[1,2,3,5,6,7,8,9]],9:[]},42:{2:[],3:[],4:[],5:[],6:[],7:[[3,4,5,6,7,8,9]],8:[[1,2,4,5,6,7,8,9]],9:[]},43:{2:[],3:[],4:[],5:[],6:[],7:[],8:[[1,3,4,5,6,7,8,9]],9:[]},44:{2:[],3:[],4:[],5:[],6:[],7:[],8:[[2,3,4,5,6,7,8,9]],9:[]},45:{2:[],3:[],4:[],5:[],6:[],7:[],8:[],9:[[1,2,3,4,5,6,7,8,9]]}},

	reduce(level, c, i, s, h, w) {
		let vals = { cells: c, strips: s};
		if (level > 2) {
			c.forEach(cell => {
				if (cell.is_data) {
					vals = this.reductionStepOne(level, vals.cells, cell.idx, vals.strips, h, w);
				}
			});
		} else {
			vals = this.reductionStepOne(level, vals.cells, i, vals.strips, h, w);
		}

		if (level > 3) {
			vals = this.reductionByElimination(level, vals.cells, vals.strips);
		}

		return { cells: vals.cells, strips: vals.strips };
	},

	reductionStepOne(level, c, i, s, h, w) {
		let { cells, strips } = this.getMyStrips(c, i, s, h, w);
		let vals = this.fillPossibleValues(cells, strips, i, 'v', level);
		vals = this.fillPossibleValues(vals.cells, vals.strips, i, 'h', level);
		cells = vals.cells;
		strips = vals.strips;
		return { cells, strips };
	},

	reductionByElimination(level, cells, strips) {
		for (let stripIdx in strips) {
			let s = strips[stripIdx];
			s.cells.forEach(i => {
				let cell = cells[i];
				if (cell.choices.length === 1) {
					let choice = cell.choices[0];
					let myStrips = cell.strips;
					strips[myStrips.v].cells.forEach(idx => {
						if (idx !== i) {
							let choices = cells[idx].choices;
							let newChoices = [];
							choices.forEach(n => {
								if (n !== choice) {
									newChoices.push(n);
								}
							});
							cells[idx].choices = newChoices;
						}
					});
					strips[myStrips.h].cells.forEach(idx => {
						if (idx !== i) {
							let choices = cells[idx].choices;
							let newChoices = [];
							choices.forEach(n => {
								if (n !== choice) {
									newChoices.push(n);
								}
							});
							cells[idx].choices = newChoices;
						}
					});
				}
			});
		};

		return { cells, strips };
	},

	fillPossibleValues(cells, strips, idx, orientation, level) {
		let strip = strips[cells[idx].strips[orientation]];
		let i = -1;
		if (level < 2) {
			i = idx;
		}
		let choices = this.getChoices(cells, strip, i);
		cells = choices.cells;
		strips[cells[idx].strips[orientation]] = choices.strip;
		return { cells, strips };
	},

	possibleValues(sum, howMany, used = [], level = 0) {
		return this.possibleValuesSubroutine(sum, howMany, used, level);
	},

	possibleValuesSubroutine(sum, howMany, used = [], level = 0) {
		let workingSet = [];
		this.universe.forEach(v => {
			if (used.indexOf(v) < 0) {
				workingSet.push(v);
			}
		});
		if (sum <= 0) {
			return [];
		}
		if (howMany === 0) {
			return [];
		}
		if (howMany === 1) {
			if (workingSet.indexOf(sum) >= 0) {
				return [sum];
			}
			return [];
		}
		let tempReturnSet = this.pv[sum][howMany];
		if (!used.length) {
			return tempReturnSet;
		}
		let returnSet = [];
		tempReturnSet.forEach(t => {
			used.forEach(u => {
				if (t.indexOf(u) < 0) {
					returnSet.push(t);
				}
			});
		});

		return returnSet;
	},

	getChoices(cells, strip, idx) {
		strip.possibleSets = this.possibleValues(strip.sum, strip.cells.length);
		strip.cells.forEach(i => {
			if (idx < 0 || idx === i) {
				let pv = this.flatten(strip.possibleSets);
				cells[i].choices = cells[i].choices.length > 0 ? this.intersect(cells[i].choices, pv) : pv;
			}
		});

		return { cells, strip };
	},

	flatten(a, set = []) {
		if (a instanceof Array) {
            a.forEach(s => {
                set = this.flatten(s, set); 
            });
        } else {
            if (set.indexOf(a) < 0) {
                set.push(a);
            }
        }

        return set.sort();
	},	

	getMyStrips(cells, idx, strips, h, w) {
		if (!cells[idx].is_data) {
			return { cells, strips };
		}
		if (cells[idx].strips.v.length && cells[idx].strips.h.length) {
			return { cells, strips };
		}

        let strip = {cells:[], changed: true};
        let firstCellRow = 0;
        let firstCellCol = 0;
        let sum = 0;
        // walk up to nearest non-data
        let i = idx - w;
        while (i > 0) {
            if (!(cells[i].is_data)) {
            	sum = parseInt(cells[i].display[0]);
            	firstCellRow = cells[i+w].row;
            	firstCellCol = cells[i+w].col;
                break;
            } else {
                strip.cells.push(cells[i].idx);
            }
            i = i - w;
        }

        // since this cell is a data cell, add it;
        strip.cells.push(idx);

        // walk down to nearest non-data
        i = idx + w;
        while (i < h * w) {
            if (!(cells[i].is_data)) {
                break;
            } else {
                strip.cells.push(cells[i].idx);
            }
            i += w;
        }
        strip.idx = firstCellRow + '_' + firstCellCol + '_v';
        strip.sum = sum;
        strips[strip.idx] = strip;
        strip.cells.forEach(c => {
        	cells[c].strips.v = strip.idx;
        })

        strip = {cells:[], changed: true};

        // walk left to nearest non-data
        i = idx - 1;
        while (i % w !== w - 1) { // walk until you have wrapped
            if (!(cells[i].is_data)) {
            	sum = parseInt(cells[i].display[1]);
            	firstCellRow = cells[i+1].row;
            	firstCellCol = cells[i+1].col;
                break;
            } else {
                strip.cells.push(cells[i].idx);
            }
            i = i - 1;
        }

        strip.cells.push(idx);
 
        // walk right to nearest non-data
        i = idx + 1;
        while (i % w) {
            if (!(cells[i].is_data)) {
                break;
            } else {
                strip.cells.push(cells[i].idx);
            }
            i += 1;
        }

        strip.idx = firstCellRow + '_' + firstCellCol + '_h';
        strip.sum = sum;
        strips[strip.idx] = strip;
        strip.cells.forEach(c => {
        	cells[c].strips.h = strip.idx;
        })

        return { cells, strips };
	},

	intersect(a, b) {
	    let t;
	    if (b.length > a.length) {
	    	// we want a to be the longer to minimize indexOf
	    	t = b, b = a, a = t;
	    }

	    return a.filter(e => {
	        return b.indexOf(e) > -1;
	    });
	}
}